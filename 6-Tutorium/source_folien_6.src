
\InputIfFileExists{../global.src}\relax\relax

\iffull
\title[Sechstes Tutorium -- Übungsblatt 6]{Tik-Tok Victoryyy\\\small Sieg auf ganzer Linie, 6}
\date{\sffamily KW 49}

\usepackage[glows]{tikzpingus}
\usetikzlibrary{decorations.text,matrix}
\hypersetup{colorlinks=false}

\begin{document}
\Titlepage{6}
\fi
\section{Präsenzaufgabe}
\newsavebox\angypingu
\savebox\angypingu{\tikz{\pingu[eyes angry,wings raise]}}
\newsavebox\wheelbox
\savebox\wheelbox{\begin{tikzpicture}
    \draw (0,0) circle[radius = 2cm];
    \foreach[count=\i,evaluate=\i as \j using ((\i - 1) * 72)] \l in {Super,Pech,Mega,Powa,Super Pech} {
        \draw (0,0) -- (\j:2cm);
        \node[rotate=\j + 72/2] at (\j+72/2:1cm) {\tiny\l};
    }
    \draw[-Kite,very thick] (0,2.35) -- ++(0,-.75);
\end{tikzpicture}}
\begin{frame}[c]{Präsenzaufgabe}
    \begin{aufgabe}{Glückselig sind die Studierenden}
        \vspace*{-1.45\topsep}\par\pause{}%
\only<2-3|handout:0>{In dieser Aufgabe sollen Sie ihre ersten Schritte mit Objektorientierter Programmierung machen, indem Sie ein einfaches Glücksrad implementieren. Dieses Glücksrad soll eine bestimmte Anzahl an Slots besitzen, welche mit Einträgen gefüllt werden können und bei einer Drehung soll ein zufälliger Eintrag ausgewählt werden.\\
Erstellen Sie dafür eine Klasse \bjava{WheelOfFortune}, welche ein \bjava{String} Array namens \bjava{slots} und einen Integer \bjava{nextSlot} als Instanzvariablen besitzt. Die Klasse soll einen Konstruktor besitzen der einen Integer \bjava{numSlots} als Parameter besitzt, welcher die Größe des Arrays bestimmt. Der Konstruktor soll beide Instanzvariablen außerdem geeignet initialisieren.
Implementieren Sie dann zusätzlich die folgenden Methoden:
\begin{enumerate}
\item Die Methode \bjava{public boolean addEntry(String entry)} soll den übergebenen Wert in den nächsten freien Slot schreiben. Stellen Sie dabei sicher, dass Sie nicht mehr Einträge in das Array schreiben als dessen Größe zulässt. Geben Sie anschließend einen \bjava{Boolean} zurück der angibt ob die Operation erfolgreich war.
\item Die Methode \bjava{public boolean removeEntry()} soll den jeweils letzten Eintrag aus Glücksrad wieder entfernen. Geben Sie dabei ebenfalls einen \bjava{Boolean} zurück, der angibt ob die Operation erfolgreich war.
\item Die Methode \bjava{public int getNumEntries()} soll die Anzahl der gesetzten Einträge zurückgeben.
\item Die Methode \bjava{public String spin()} soll schließlich einen zufälligen Eintrag auswählen und diesen zurückgeben. Achten Sie darauf, dass Sie nur die Indizes des Arrays betrachten bei denen auch Einträge eingefügt wurden. Sollte kein Eintrag im Array vorhanden sein, geben Sie einen leeren \bjava{String} zurück.
\end{enumerate}
Erzeugen Sie sich dann in der \bjava{main}-Methode eine Instanz dieser Klasse und rufen Sie ihre implementierten Methoden sinnvoll auf.}%
\onslide<4->{\footnotesize Implementieren Sie ein veränderbares \bjava{WheelOfFortune}.\vspace*{-4pt} \begin{enumerate}[<+(1)->]
    \itemsep=-1pt
    \item<5-> Erstellen Sie eine Klasse \bjava{WheelOfFortune} welches ein String Array \bjava{slots} fester Größe und eine Instanzvariablen \bjava{int nextSlot} besitzt.
    \item<6-> \bjava{public boolean addEntry(String entry)} fügt einen Eintrag hinzu, sofern es die Größe zulässt (der Rückgabewert kennzeichnet den Erfolg).
    \item<7-> \bjava{public boolean removeEntry()} entfernt den letzten hinzugefügten Eintrag wieder (der Rückgabewert kennzeichnet ob ein Eintrag entfernt wurde).
    \item<8-> \bjava{public int getNumEntries()} soll die Gesamtanzahl der Einträge liefern.
    \item<9-> \bjava{public String spin()} dreht das Glücksrad und liefert den Eintrag zurück. Gibt es keinen Eintrag wünschen wir einen leeren String.
\end{enumerate}}
\onslide<10->{\parbox{6.5cm}{\footnotesize Erzeugen Sie zudem eine \bjava{main}-Methode welche das Rad sinnvoll benutzt.}}\null\onslide<5->{\hfill\smash{\raisebox{2.75\baselineskip}{\llap{\rotatebox{-90}{\tikzpicture
    \draw[rounded corners=2pt] (0,1/4) rectangle ++(1.25,3.5);
    \foreach[count=\i] \k in {Super,Pech,Mega,Powa,Super Pech,{},{}} {
        \node[scale=.95] at(1.25/2,\i/2) {\tiny\k};
        \node[left] at(0,\i/2) {\rotatebox[origin=c]{90}{\ifnum\i=6\color{paletteB}\fi\tiny\the\numexpr\i-1}};
        \ifnum\i>1
            \draw (0,\i/2-1/2+1/4) -- ++(1.25,0);
        \fi
    }
    \node[below=5mm,xshift=-4mm] at(current bounding box.south) {\rotatebox{90}{\bjava{nextSlot = 5}}};
\endtikzpicture}}}}}\\[-3pt]
        \onslide<1->
    \end{aufgabe}
\begin{tikzpicture}[overlay,remember picture]
    \only<3|handout:0>{\node at(current page.center) {\usebox\angypingu};}
    \only<5|handout:0>{
        \node[thick,draw=gray,yshift=-7mm,xshift=-2cm,rounded corners=1.45pt,fill=white,scale=1.125,inner sep=6pt] at(current page.center) {\usebox\wheelbox};
    }
\end{tikzpicture}
\end{frame}

\MakeThePinguExplainIt{}{Von \textbf{Klassen} lassen sich durch den \textbf{Konstruktor} \textbf{Objekte} erzeugen. Der \textbf{Zustand} eines Objekts ist durch die \textbf{Instanzvariablen} definiert. Jedes Objekt hat seinen \textit{eigenen Zustand}.}
\begin{frame}[t,fragile]{Präsenzaufgabe - Lösung\hfill Das Gerüst}
    \begin{itemize}[<+(1)->]
        \item Eine Basis (\only<2->{\textattachfile{\curpath WheelOfFortune.java}{WheelOfFortune.java}}):\lstfs{10}
\begin{plainjava}
!*\onslide<3->*!public class WheelOfFortune {
!*\onslide<4->*!    private String[] slots;
!*\onslide<5->*!    private int nextSlot;
!*\onslide<3->*!
!*\onslide<6->*!    public WheelOfFortune(int numSlots) {
!*\onslide<7->*!        nextSlot = 0;
!*\onslide<8->*!        // keine negative Länge
!*\onslide<8->*!        slots = new String[Math.max(numSlots, 0)];
!*\onslide<9->*!        // Am Anfang setzen wir alle auf den leeren String
!*\onslide<9->*!        for(int i = 0; i < slots.length; i++)
!*\onslide<9->*!            slots[i] = ""; // vs. new String("");
!*\onslide<6->*!    }
!*\onslide<3->*!}
\end{plainjava}
    \end{itemize}
\begin{tikzpicture}[overlay, remember picture]
    \onslide<10->{\node[left=-7mm,scale=.8] at(current page.0) {\usebox\pinguexplainbox};}
\end{tikzpicture}
\end{frame}

\begin{frame}[c,fragile]{Präsenzaufgabe - Lösung\hfill Hinzufügen}
\begin{plainjava}
!*\onslide<2->*!public boolean addEntry(String entry) {
!*\onslide<3->*!    if(nextSlot == slots.length) // Sind wir voll?
!*\onslide<3->*!        return false;
!*\onslide<2->*!
!*\onslide<4->*!    slots[nextSlot] = entry;
!*\onslide<4->*!    nextSlot++;
!*\onslide<5->*!    return true;
!*\onslide<2->*!}
\end{plainjava}
\end{frame}

\begin{frame}[c,fragile]{Präsenzaufgabe - Lösung\hfill Entfernen\iffull\else\ \& Zählen\fi}
\begin{plainjava}
!*\onslide<2->*!public boolean removeEntry() {
!*\onslide<3->*!    if(nextSlot == 0) // Sind wir leer?
!*\onslide<3->*!        return false;
!*\onslide<3->*!
!*\onslide<4->*!    nextSlot--;
!*\onslide<4->*!    slots[nextSlot] = "";
!*\onslide<5->*!    return false;
!*\onslide<2->*!}
\end{plainjava}
\iffull\else
\begin{plainjava}
!*\onslide<2->*!public int getNumEntries() {
!*\onslide<3->*!    return nextSlot;
!*\onslide<2->*!}
\end{plainjava}
\fi
\end{frame}

\iffull \begin{frame}[c,fragile]{Präsenzaufgabe - Lösung\hfill Zählen}
\begin{plainjava}
!*\onslide<2->*!public int getNumEntries() {
!*\onslide<3->*!    return nextSlot;
!*\onslide<2->*!}
\end{plainjava}
\end{frame}
\fi
\MakeThePinguExplainIt[text width=7cm]{}{(Pseudo-)\textbf{Zufall} ist ein spannendes Thema. Anstelle von \bjava{Math.random()} können wir uns direkt ein \say{Random-Objekt} bauen:
\begin{plainjava}^^J
Random rnd = new Random();^^J
rnd.nextInt(15); // \{0,...,14\}^^J
\end{plainjava}}
\begin{frame}[c,fragile]{Präsenzaufgabe - Lösung\hfill Es geht wieder loooos}
\vspace*{1em}
\begin{plainjava}
!*\onslide<2->*!public String spin() {
!*\onslide<3->*!    // Sind wir leer?
!*\onslide<3->*!    if(slots.length == 0)
!*\onslide<3->*!        return "";
!*\onslide<2->*!
!*\onslide<4->*!    int slot = (int) (Math.random() * nextSlot);
!*\onslide<5->*!    return slots[slot];
!*\onslide<2->*!}
\end{plainjava}
\begin{tikzpicture}[overlay, remember picture]
    \onslide<6->{\node[left=-7mm,scale=.8] at(current page.-2) {\usebox\pinguexplainbox};}
\end{tikzpicture}
\end{frame}


\begin{frame}[c,fragile]{Präsenzaufgabe - Lösung\hfill Use the world}
\lstfs{9}
\begin{plainjava}
public static void main(String[] args) {
    int numSlots = 6;
    WheelOfFortune wheel = new WheelOfFortune(numSlots);

    for(int i = 0; i < numSlots + 1; i++) {
        String entry = "Eintrag " + (char) ('A' + i);
        if(wheel.addEntry(entry))
            System.out.println("Eintrag " + entry + " hinzugefügt");
        else System.out.println("Glücksrad ist voll");
    }

    String result = wheel.spin();
    System.out.println("Ergebnis einer Drehung: " + result);
    while(wheel.getNumEntries() > 0)
        wheel.removeEntry();
    result = wheel.spin();
    System.out.println("Drehen des leeren Glücksrades ergibt: " + result);
}
\end{plainjava}
\end{frame}



\newsavebox\tttbox
\savebox\tttbox{\ttt{--- --- ---}\printtt}
\newsavebox\codebox
\savebox\codebox{%
\parbox{3.65cm}{%
\begin{plainvoid}[columns=fixed]^^J
+---+---+---+^^J
|\ \ \ |\ \ \ |\ \ \ |^^J
+---+---+---+^^J
|\ \ \ |\ \ \ |\ \ \ |^^J
+---+---+---+^^J
|\ \ \ |\ \ \ |\ \ \ |^^J
+---+---+---+^^J
\end{plainvoid}
}}
\section{Übungsblatt 6}
\iffull
\begin{frame}[c]{}
    % TODO: start animation slide as optional argument. than: update for each anim
    % furhtermore: show action by player at the bottom
    \downsize\linewidth{\SimulateTTTPlay{5, 3, 2, 8}{2}}
\end{frame}
\fi
\subsection{Aufgabe 1a)}
\begin{frame}[t,fragile]{Übungsblatt 6 - Aufgabe 1a)}
    \begin{itemize}[<+(1)->]
        \item We wanta print a board (\only<2->{\textattachfile{\curpath TicTacToe.java}{TicTacToe.java}}):
\begin{plainjava}
!*\onslide<3->*!public static void printBoard(char[][] board) {
!*\onslide<4->*!    for (char[] row : board) {
!*\onslide<5->*!        System.out.println("+---+---+---+");
!*\onslide<6->*!        for (char cell : row)
!*\onslide<6->*!            System.out.print("| " + (cell != 0 ? cell : ' ') + " ");
!*\onslide<7->*!        System.out.println("|");
!*\onslide<4->*!    }
!*\onslide<8->*!    System.out.println("+---+---+---+\n");
!*\onslide<3->*!}
\end{plainjava}
    \end{itemize}
\begin{tikzpicture}[overlay,remember picture]
    \onslide<9->{\node[below left=.35cm,yshift=-1.25cm,scale=.8] at(current page.north east) {\usebox\tttbox};}
    \onslide<10->{\node[above left=.35cm,yshift=.5cm,inner sep=1pt,scale=.65,align=left,fill=shadeA,rounded corners=2pt] at(current page.south east) {\usebox\codebox};}
\end{tikzpicture}
\end{frame}

\subsection{Aufgabe 1b)}
\MakeThePinguExplainIt[text width=13.5cm]{right item angle=-136}{Wir versuchen \textbf{lesbaren Code} zu schreiben. Anstelle einfach \bjava{isMoveValid} und \bjava{makeMove} zu integrieren, lagern wir den Code in Subroutinen aus, welche dessen Semantik als Namen tragen. In späteren Veranstaltungen ist dies im Rahmen der \textbf{Testbarkeit} und \textbf{Lesbarkeit} von besonderem Interesse.}
\begin{frame}[t,fragile]{Übungsblatt 6 - Aufgabe 1b)}
    \def\printscale{.35}
    \begin{itemize}[<+(1)->]
        \item Request from the best:
\begin{plainjava}
!*\onslide<3->*!public static char[][] getMove(int player, char[][] board) {
!*\onslide<4->*!    System.out.println("Spieler " + player + " ist am Zug:");
!*\onslide<4->*!    int move = 0;
!*\onslide<5->*!    do {
!*\onslide<6->*!        move = scanner.nextInt();
!*\onslide<5->*!    } while !*\onslide<7->*!(!isMoveValid(board, move));
!*\onslide<8->*!    return makeMove(board, move, player);
!*\onslide<3->*!}
\end{plainjava}
    \end{itemize}
\begin{tikzpicture}[overlay, remember picture]
    \onslide<7->{\node[left=-7mm,scale=.8] at(current page.-21) {\usebox\pinguexplainbox};}
\end{tikzpicture}
\end{frame}

\begin{frame}[t,fragile]{Übungsblatt 6 - Aufgabe 1b)}
    \def\printscale{.35}
    \begin{itemize}[<+(1)->]
        \item Check it and regret it:
\begin{plainjava}
!*\onslide<3->*!private static boolean isMoveValid(char[][] board, int move) {
!*\onslide<4->*!    return move >= 1 && move <= 9
!*\onslide<5->*!        && board[getY(move)][getX(move)] == 0;
!*\onslide<3->*!}

!*\onslide<6->*!public static int getX(int cellNumber) {
!*\onslide<7->*!    return (cellNumber - 1) % 3;
!*\onslide<6->*!}

!*\onslide<8->*!public static int getY(int cellNumber) {
!*\onslide<8->*!    return (cellNumber - 1) / 3;
!*\onslide<8->*!}
\end{plainjava}
\begin{tikzpicture}[overlay,remember picture]
    \onslide<5->{\node[above left=.35cm,yshift=.5cm,scale=.8] at(current page.south east) {\usebox\tttbox};}
\end{tikzpicture}
    \end{itemize}
\end{frame}

\begin{frame}[t,fragile]{Übungsblatt 6 - Aufgabe 1b)}
    \begin{itemize}[<+(1)->]
        \item Execute Order 66:\lstfs{9}
\begin{plainjava}
!*\onslide<3->*!private static char[][] makeMove(char[][] board, int cellNumber, int player) {
!*\onslide<4->*!    char[][] newBoard = board.clone(); // odeeeer?
!*\onslide<5->*!    newBoard[getY(cellNumber)][getX(cellNumber)] = getPlayerSymbol(player);
!*\onslide<6->*!    return newBoard;
!*\onslide<3->*!}
\end{plainjava}
        \item Wo wir schon bei Star Wars\texttrademark sind\ldots
        \item Have you ever heard the tragedy of Darth Clon\textbf{e}able the wise? \pause Well, then prepare yourself for\ldots\ something at least.
    \end{itemize}
\end{frame}

\iffull
\subsection{Interlude Cloneable}
\fi
{
\setbeamercolor{background canvas}{bg=black}
\begin{frame}[c,plain]{}
\vspace*{1.5em}\centering
\begin{tikzpicture}[overlay,remember picture]
    \pgfinterruptboundingbox% to avoid clanky changes
    \only<2|handout:0>{\pingu[eyes wink]}
    \only<3|handout:0>{\pingu[right wing grab, lightsaber right, lightsaber right disabled]}
    \only<4|handout:0>{\pingu[right wing grab, eyes angry, lightsaber right=purple]}
    \only<5|handout:0>{\pingu[right wing wave, eyes angry, lightsaber right=purple]}
    \only<6|handout:0>{\pingu[right wing wave, eyes angry, lightsaber right=purple,right item angle=-70],bill angry}
    \only<7|handout:0>{\pingu[right wing wave, eyes angry, lightsaber right=purple,lightsaber right double,right item angle=-70],bill angry}
    \pgfonlayer{background}
    \only<9->{\node[white!14!black,scale=9] at(current page.center) {\Large\textsc{clone}};}
    \endpgfonlayer
    \only<8-9|handout:0>{\pingu[right wing grab, eyes angry, lightsaber right=purple,lightsaber right double,right item angle=-70,bill angry,right item angle=-80,lightsaber right yshift=-.45mm]}
    \only<10->{\pingu[right wing grab, eyes angry, lightsaber right=purple,lightsaber right double,right item angle=-70,bill angry,right item angle=-80,lightsaber right yshift=-.45mm,left eye devil]}
    \endpgfinterruptboundingbox
\end{tikzpicture}~~~~~~~~~~~~~~
\end{frame}
}

\iffull
\begin{frame}[t,fragile]{Präsenzaufgabe - Exkurs: Object}
    \begin{itemize}[<+(1)->]
        \item \bjava{Object} ist die Klasse, welche die grundlegenden Eigenschaften für jede andere Klassen zur Verfügung stellt.
        \item Wir werden sie später im Rahmen von Vererbung genauer kennen lernen.\par
            Bis da hin: \bjava{toString} stammt beispielsweise dort her.
        \item Diese Klasse \bjava{Object} liefert auch die Methode \bjava{clone}, die auf jedem Objekt aufgerufen werden kann\pause\ldots\pause{} \ldots\pause{} \ldots
        \item \bjava{clone} muss aber von jeder Klasse selbst und individuell implementiert werden, wenn es denn unterstützt werden soll.
    \end{itemize}
\end{frame}

\begin{frame}[t,fragile]{Präsenzaufgabe - Exkurs: Kopien}
    \begin{itemize}[<+(1)->]
        \item Da die Variable eines Objekts in Java nur eine Referenz auf das eigentliche Objekt enthält, erzeugen wir durch den folgenden Code \emph{keine} Kopie:\pause{}
\begin{plainjava}
Scanner a = new Scanner(System.in);
Scanner b = a;
\end{plainjava}
        \item Oft stellen sich auch Fragen wie:
         \begin{itemize}
             \item Was soll kopiert werden?
             \item Funktioniert eine Kopie überhaupt?
             \item Was ist, wenn das zu kopierende Objekt selbst wieder (zum Beispiel in den Attributen) Referenzen auf andere Objekte enthält?
             \item Was, wenn diese Referenzen zirkulär sind?
         \end{itemize}
    \end{itemize}
\end{frame}

\begin{frame}[t,fragile]{Präsenzaufgabe - Exkurs: Kopien}
    \begin{itemize}[<+(1)->]
        \item Deswegen unterscheiden wir zwei Arten von Kopien: \emph{shallow} und \emph{deep}.\par
            \info{Genau genommen gibt es noch viel mehr, wie zum Beispiel \emph{lazy}, aber das soll uns hier nicht weiter stören.}
        \item Eine \emph{shallow copy} kopiert \say{so wenig wie möglich}. Oder auch nur \say{die erste Hierarchieebene.}
        \item Eine \emph{deep copy} kopiert das komplette Objekt, sowie alle Objekt-Referenzen die dieses Objekt wieder besitzt und so weiter.
        \item Während shallow copies meist von Hand geschrieben werden,\pause{} wird eine deep copy meistens durch (De-)Serialisierung gelöst.\par\pause{}\info{Sonst müssten bei einer deep copy auch alle vom Objekt verwendeten Ressourcen wieder deep-copyable sein.\pause{} Das Verfahren hat allerdings ebenfalls Nachteile. Stichwort: \bjava{transient}.}
    \end{itemize}
\end{frame}

\begingroup
\lstset{add to literate={X}{{{\solGet{keywordC}{X}}}}1 {Y}{{{\solGet{keywordC}{Y}}}}1 {Z}{{{\solGet{keywordC}{Z}}}}1}
\begin{frame}[t,fragile]{Präsenzaufgabe - Exkurs: Kopien, Beispiel}
    \begin{itemize}[<+(1)->]
        \item Betrachten wir die folgende Klasse (\bjava{Y} und \bjava{Z} seien ebenfalls gegeben):\pause
\begin{plainjava}
class X {
    int a;
    Y y;
    Z z;
}
\end{plainjava}
        \item Eine \emph{shallow copy} würde ein neues \bjava{X}-Objekt erzeugen und die Attribute durch \say{\bjava{=}} zuweisen.\pause{} Damit wird \bjava{a} kopiert, \bjava{y} und \bjava{z} referenzieren aber (je) dasselbe Objekt.
        \item Eine \emph{deep copy} würde rekursiv auch neue Objekte von \bjava{Y} und \bjava{Z} erzeugen.\par\pause{} \info{Quizfrage: was passiert oder besser, was kann alles passieren, wenn \bjava{Y} wieder eine Referenz auf \bjava{X} enthält?}
        \item Und was davon macht jetzt \bjava{Object::clone()}?\pause{} Spoiler: Nobody knows.
    \end{itemize}
\end{frame}
\endgroup

\begin{frame}[t,fragile]{Präsenzaufgabe - Exkurs: Cloneable}
    \begin{itemize}[<+(1)->]
        \item Das Interface Cloneable \emph{fordert nichts} von einer gegebene Klasse.
        \item Es ist ein sogenanntes \say{Marker} interface.\pause{} Wer es implementiert, sorgt dafür, dass gewisse Methoden sich einem gewissen Vertrag unterwerfen.\pause\par\info{Diese Erklärung ist an sich nachträglich entstanden. Die komplette Geschichte um das \bjava{Cloneable}-Interface ist eine einzige Tragödie.}
        \item Aus dem Java-Contract:\pause
\lstfs{9}
\begin{plainjava}
/*
 * Note that this interface does not contain the clone method.
 * Therefore, it is not possible to clone an object merely by virtue of the
 * fact that it implements this interface. !*\onslide<+(1)->*! Even if the clone method is invoked
 * reflectively, there is no guarantee that it will succeed.
 */
\end{plainjava}
    \end{itemize}
\end{frame}

\begin{frame}[t,fragile]{Präsenzaufgabe - Exkurs: Cloneable, Schadensbericht}
    \begin{itemize}[<+(1)->]
        \item Das Interface widerspricht der sonstigen Schreibweise.\pause{} \info{Clonable vs. Cloneable.}
        \item Es fordert keine Methode und kann theoretisch von jeder Klasse implementiert werden.
        \item Es liefert keine weiteren Informationen über die Kopie.
        \item Es stellt keine Anforderungen an die Java-Syntax (Sichtbarkeit), die nicht gleichermaßen geprüft werden können.
        \item Der Rückgabewert der \bjava{Object::clone}-Methode ist stets \bjava{Object}, wir brauchen also einen expliziten Cast.\pause{} \info{Wie bei \bjava{(Date) this.birthday.clone()}.}
        \item \ldots\pause{} \ldots\pause{} \ldots
    \end{itemize}
\end{frame}

\begin{frame}[t,fragile]{Präsenzaufgabe - Exkurs: Long story short}
    \begin{itemize}[<+(1)->]
        \item Manche Java Klassen implementieren \bjava{Cloneable} korrekt.\pause{} \info{Wie \bjava{Date}.}
        \item Ansonsten haben sich andere Prinzipien durchgesetzt. So beispielsweise Copy-Konstruktoren.
        \item Diesen werden noch später im Semester begegnen.
        \item Also kehren wir uns lieber von der dunklen Seite ab und zur Aufgabe zurück\ldots
    \end{itemize}
\end{frame}

{
\setbeamercolor{background canvas}{bg=black}
\begin{frame}[c,plain]{}
\vspace*{1.5em}\centering
\begin{tikzpicture}
    \pgfinterruptboundingbox% to avoid clanky changes
    \only<2|handout:0>{
        \pingu[xshift=-3cm,yshift=.5cm]
        \pingu[xshift=3cm,yshift=.5cm]
        \pingu[]
    }
    \only<3|handout:0>{
        \pingu[xshift=-3cm,yshift=.5cm,right wing grab, lightsaber right, lightsaber right disabled,eyes wink]
        \pingu[xshift=3cm,yshift=.5cm,left wing grab, lightsaber left, lightsaber left disabled,eyes wink]
        \pingu[right wing grab, lightsaber right, lightsaber right disabled, eyes shiny,left wing wave, lightsaber left, lightsaber left disabled,right item angle=-80,lightsaber right yshift=-.5mm,left item angle=75]
    }
    \only<4->{
        \pingu[xshift=-3cm,yshift=.5cm,right wing grab, lightsaber right=orange,eyes wink]
        \pingu[xshift=3cm,yshift=.5cm,left wing grab, lightsaber left=orange,eyes wink]
        \pingu[right wing grab, lightsaber right=pingu@blue, eyes shiny,left wing wave, lightsaber left=green,right item angle=-80,lightsaber right double,lightsaber right yshift=-.5mm,left item angle=75]
    }
    \endpgfinterruptboundingbox
\end{tikzpicture}~~~~~~~~~~~~~~
\end{frame}
}
\subsection{Aufgabe 1b) -- Fortsetzung}
\fi

\begin{frame}[t,fragile]{Übungsblatt 6 - Aufgabe 1b)\hfill Fortsetzung}
    \begin{itemize}[<+(1)->]
        \item Outstanding Deep-Copy:
\begin{plainjava}
!*\onslide<3->*!char[][] newBoard = new char[3][3];
!*\onslide<4->*!for (int i = 0; i < 3; i++) {
!*\onslide<5->*!    for (int j = 0; j < 3; j++) {
!*\onslide<6->*!        newBoard[i][j] = board[i][j];
!*\onslide<5->*!    }
!*\onslide<4->*!}
\end{plainjava}
    \item<7-> Wer \bjava{clone} doch benutzen \say{muss}:
\begin{plainjava}
!*\onslide<8->*!for(int i = 0; i < 3; i++) {
!*\onslide<9->*!    newBoard[i] = board[i].clone();
!*\onslide<8->*!}
\end{plainjava}
\end{itemize}
\end{frame}

\subsection{Aufgabe 1c)}
\MakeThePinguExplainIt[text width=8.75cm,minimum height=1cm]{right item angle=-136}{Hier könnte man auch eine Enumeration verwenden.}
\begin{frame}[t,fragile]{Übungsblatt 6 - Aufgabe 1c)}
    \begin{itemize}[<+(1)->]
        \item Outstanding Move:
\begin{plainjava}
!*\onslide<3->*!public static boolean winningMove(int player, char[][] board) {
!*\onslide<4->*!    char c = getPlayerSymbol(player);
!*\onslide<5->*!    return winsHorizontal(board, c) || winsVertical(board, c)
!*\onslide<5->*!        || winsDiagonal(board, c);
!*\onslide<3->*!}
\end{plainjava}
        \item<6-> Für das Spielersymbol:
\begin{plainjava}
!*\onslide<7->*!public static char getPlayerSymbol(int player) {
!*\onslide<8->*!    return (player == 1) ? 'x' : 'o';
!*\onslide<7->*!}
\end{plainjava}
    \end{itemize}
\begin{tikzpicture}[overlay, remember picture]
    \onslide<9->{\node[left=-7mm,scale=.8] at(current page.-21) {\usebox\pinguexplainbox};}
\end{tikzpicture}
\end{frame}

\begin{frame}[t,fragile]{Übungsblatt 6 - Aufgabe 1c)}
    \begin{itemize}[<+(1)->]
        \item Win me Baby:\lstfs{8}
\begin{plainjava}
!*\onslide<3->*!private static boolean winsHorizontal(char[][] board, char c) {
!*\onslide<4->*!   return ((board[0][0] == c) && (board[0][1] == c) && (board[0][2] == c)) ||
!*\onslide<4->*!         ((board[1][0] == c) && (board[1][1] == c) && (board[1][2] == c)) ||
!*\onslide<4->*!         ((board[2][0] == c) && (board[2][1] == c) && (board[2][2] == c));
!*\onslide<3->*!}
!*\onslide<3->*!
!*\onslide<5->*!private static boolean winsVertical(char[][] board, char c) {
!*\onslide<6->*!   return ((board[0][0] == c) && (board[1][0] == c) && (board[2][0] == c)) ||
!*\onslide<6->*!         ((board[0][1] == c) && (board[1][1] == c) && (board[2][1] == c)) ||
!*\onslide<6->*!         ((board[0][2] == c) && (board[1][2] == c) && (board[2][2] == c));
!*\onslide<5->*!}
!*\onslide<3->*!
!*\onslide<7->*!private static boolean winsDiagonal(char[][] board, char c) {
!*\onslide<8->*!   return ((board[0][0] == c) && (board[1][1] == c) && (board[2][2] == c)) ||
!*\onslide<8->*!         ((board[2][0] == c) && (board[1][1] == c) && (board[0][2] == c));
!*\onslide<7->*!}
\end{plainjava}
    \end{itemize}
\end{frame}

\subsection{Aufgabe 1d)}
\MakeThePinguExplainIt[text width=9.15cm,scale=.9765]{right item angle=56,staff right length=33mm,cap=!hide,vr-headset, vr-headset hair}{\bjava{Scanner::close} ist eure \makebox{\bfseries L\,e\,b\,e\,n\,s\,v\,e\,r\,s\,i\,c\,h\,e\,r\,u\,n\,g!} Schließt eine Ressource die ihr anfordert \textbf{immer} und \textbf{ohne Ausnahme} idealerweise hält die selbe Abstraktionsebene Anforderung und Abstoßung. Später machen das auto-closeables angenehmer.
}
\begin{frame}[t,fragile]{Übungsblatt 6 - Aufgabe 1d)}
    \begin{itemize}[<+(1)->]
        \item The main:\lstfs{9}
\begin{plainjava}
!*\onslide<3->*!int player = 1; // Start player 1
!*\onslide<3->*!char[][] board = emptyTicTacToeBoard();
!*\onslide<3->*!
!*\onslide<4->*!// Game loop
!*\onslide<4->*!for (int i = 0; i < 9; i++) {
!*\onslide<5->*!    board = getMove(player, board);
!*\onslide<6->*!   :ws:printBoard(board);
!*\onslide<7->*!    if (winningMove(player, board)) {
!*\onslide<8->*!        System.out.println("Spieler " + player + " hat gewonnen!");
!*\onslide<8->*!        return;
!*\onslide<7->*!    }
!*\onslide<9->*!    player = otherPlayer(player);
!*\onslide<4->*!}
!*\onslide<10->*!System.out.println("Unentschieden");
!*\onslide<11->*!scanner.close(); // !*\textbf{wichtig}*!
\end{plainjava}
    \end{itemize}
\begin{tikzpicture}[overlay, remember picture]
    \onslide<12->{\node[left=-5mm,scale=.8] at(current page.-4) {\usebox\pinguexplainbox};}
\end{tikzpicture}
\end{frame}

\MakeThePinguExplainIt[text width=10.33cm]{right item angle=-70,cap=!hide,headphone}{Ist eine solche Initialisierung \textbf{notwendig}? Nein. Java weist Variablen \say{Default-Werte} zu (\say{die \(0\)}). Zahlen werden \(0\), booleans \bjava{false}, chars kriegen das Zeichen mit ASCII \(0\),~\ldots\medskip\\
Dennoch, \say{explicit is better than implicit}. Andere Sprachen machen das andes, was das Lesen erschwert. Zudem zwingt explizit dazu, sich über den \say{Standardwert} Gedanken zu machen.}
\begin{frame}[t,fragile]{Übungsblatt 6 - Aufgabe 1d)}
    \begin{itemize}[<+(1)->]
        \item Initialize the board:
\begin{plainjava}
!*\onslide<3->*!public static char[][] emptyTicTacToeBoard() {
!*\onslide<4->*!    char[][] board = new char[3][3];
!*\onslide<5->*!    for (int i = 0; i < 3; i++) {
!*\onslide<6->*!        for (int j = 0; j < 3; j++) {
!*\onslide<7->*!            board[i][j] = 0;
!*\onslide<6->*!        }
!*\onslide<5->*!    }
!*\onslide<8->*!    return board;
!*\onslide<3->*!}
\end{plainjava}
    \end{itemize}
\begin{tikzpicture}[overlay, remember picture]
    \onslide<9->{\node[left=-7mm,scale=.8] at(current page.-21) {\usebox\pinguexplainbox};}
\end{tikzpicture}
\end{frame}

\newsavebox\sheriffbox
\savebox\sheriffbox{\tikz \pingu[sheriff star,straw hat=pingu@bronze!90!black,eyes wink, straw hat ribbon=pingu@bronze!90!black!80!pingu@white,right wing wave];}
\begin{frame}[t,fragile]{Übungsblatt 6 - Aufgabe 1d)}
    \begin{itemize}[<+(1)->]
        \item Toggle den Spieler in dir:
\begin{plainjava}
!*\onslide<3->*!public static int otherPlayer(int player) {
!*\onslide<4->*!    return player == 1 ? 2 : 1;
!*\onslide<3->*!}
\end{plainjava}
    \end{itemize}
\begin{tikzpicture}[overlay,remember picture]
    \onslide<5->{\node[above left=.65cm,scale=2] at(current page.south east) {\usebox\sheriffbox};}
\end{tikzpicture}
\end{frame}

\iffull
\begin{frame}[c]
    \begin{tikzpicture}[remember picture,overlay]
        \only<2->{\node[align=center] (b) at(current page.center) {\Large\bfseries What if i don't have friends?};}
        \only<3->{\node[below,align=center] (c) at(b.south) {How about AI?};}
        \only<4>{\node[below=1cm,align=center] at(c.south) {Maybe on a later day (die ganze \LaTeX-KI umsonst).};}
    \end{tikzpicture}
\end{frame}
\fi

\definecolor{bee}{RGB}{255, 224, 108}
\definecolor{wings}{RGB}{205, 245, 253}
\colorlet{wings}{wings!70!white}
\newsavebox\beebox
\def\lbody{ (left) to[out=270,in=150] (0,-.725) to[out=30,in=270] (right)}
\savebox\beebox{\begin{tikzpicture}[body/.style={pingu@black!82!BlueGrey50},scale=4,very path/.append style={line join=round}]
% wings
\coordinate (wl) at(20:2.55mm);
\coordinate (wr) at(160:2.55mm);
\draw[very thick,body,fill=wings!80!white,rotate around=-32:(wl)] (wl) ellipse [x radius=6.15mm, y radius=2.75mm];
\draw[very thick,body,fill=wings!80!white,rotate around=32:(wr)] (wr) ellipse [x radius=6.15mm, y radius=2.75mm];
\draw[very thick,body,fill=wings,rotate around=19:(wl)] (wl) ellipse [x radius=6.55mm, y radius=3.125mm];
\draw[very thick,body,fill=wings,rotate around=-19:(wr)] (wr) ellipse [x radius=6.55mm, y radius=3.125mm];
% body
\path (-.375,0) coordinate (left) -- (.375,0) coordinate (right);
\filldraw[ultra thick,body]\lbody;
\scope\clip\lbody;
\foreach \angl in {30,1} {
\fill[bee] (-\angl:.75) to[bend left=14] (180+\angl:.75) -- ++(0,-1.75mm)
                     to[bend right=14] (-\angl-14:.75) -- cycle;
}\endscope
% left and right arm
\foreach\m/\s/\k in {right/-2.45/95,left/-.75/80} {
\scope[shift=(\m),yshift=\s,rotate around=\k:(\m),scale=.166]
\fill[body] (-.965,0) arc(270:90:.29) -- ++(1.233,0) arc (90:-90:.29) -- cycle;
\endscope}
% sting
\draw[line cap=round,body,thick] (0,-.725) -- ++(0,-.035);
% head
\draw[ultra thick,body,fill=bee,rounded corners=6pt] (.85mm,-.55mm) to[bend right=30,looseness=.9] ([xshift=1.45mm,yshift=1.35mm]right) arc(0:180:{(.75cm+2*1.45mm)/2} and {(.75cm+2*1.45mm)/2.05}) to[bend right=30,looseness=.9] (-.85mm,-.55mm) -- cycle;
% eyes [intersect with left and right]
\fill[body] (left|-0,2.265mm)++(.6mm,0) coordinate (el) circle[radius=.6mm];
\coordinate (ell) at ([yshift=-.8mm]el);
\fill[red!21!bee,rotate around=3:(ell)] ([yshift=-.8mm]el) ellipse[x radius=.412mm, y radius=.165mm];
\fill[body] (right|-0,2.265mm)++(-.6mm,0) coordinate (er) circle[radius=.6mm];
\coordinate (err) at ([yshift=-.8mm]er);
\fill[red!21!bee,rotate around=-1:(err)] ([yshift=-.8mm]er) ellipse[x radius=.4mm, y radius=.155mm];
% mouth
\scope[yshift=1mm]
\draw[thick,line cap=round] (-.6mm,0) arc (180:360:.6mm and .415mm);
% antenna
\draw[body,line cap=round,ultra thick] (123:4mm) to[out=110,in=-41] ++(-1mm,3mm) coordinate (@);
\fill[body,rotate around=-41:(@)] ([xshift=-.1mm,yshift=-.185mm]@) ellipse[x radius=.55mm,y radius=.35mm];
\draw[body,line cap=round,ultra thick] (57:4mm) to[out=70,in=180+41] ++(1mm,3mm) coordinate (@);
\fill[body,rotate around=41:(@)] ([xshift=-.1mm,yshift=-.2mm]@) ellipse[x radius=.55mm,y radius=.35mm];
\endscope
\end{tikzpicture}}

\newsavebox\pingudoc
\savebox\pingudoc{\tikz\pingu[body=pingu@black,shirt=pingu@red!80!pingu@black!70!white,bow tie=orange!90!purple, left wing wave, cape=pingu@white!75!gray, halo, halo raise=1.55mm,halo above,cloak wings=false,right eye wink,right,cloak cap=pingu@white!75!gray,monocle left,monocle left glass=pingu@bronze,cane right=pingu@bronze!90!pingu@black, cane right raise=-1.65mm];}
\section{Der End-Pinguuuu}
\mode
<beamer>
% has to be forget to work with the new ck printer
\begin{frame}[c]{Evaluation -- Vorlesung}
    \FancyQrDoNotPrintSquare{5}{5}%
    \pause\centering\nohyper{\fancyqr[height=5cm,level=H]{https://t1p.de/n7mhl}}\llap{\makebox[5cm]{\raisebox{-.575cm}{\smash{\resizebox{1.45cm}!{{\tikz{\pingu[wings wave,eyes wink,halo=qr@fancy@gradient@tl!50!qr@fancy@gradient@br,halo glow=false,heart=qr@fancy@gradient@tl!50!qr@fancy@gradient@br,body type=chubby]\node[above=-5.8pt] at(current bounding box.north) {};}}}}}}}\llap{\makebox[5cm]{\smash{\raisebox{-3.15cm}{\bfseries\nohyper{\color{pingu@black}\url{https://t1p.de/n7mhl}}}}}} % todo rounded corners with white background
\end{frame}
\mode
<all>
\begin{frame}[c]
   \pause\begin{center}
    \scalebox{1.25}{\begin{tikzpicture}
        \node[scale=.265,rotate=-13] (bb) at (0,0) {\usebox\beebox};
        \node[left,yshift=-16mm,scale=1.33] at (bb.west) {\usebox\pingudoc};
    \end{tikzpicture}}
   \end{center}
\end{frame}
\iffull \end{document} \fi
