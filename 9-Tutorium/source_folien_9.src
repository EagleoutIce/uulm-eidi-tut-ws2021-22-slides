% #region preamble
\InputIfFileExists{../global.src}\relax\relax

\iffull
\title[Neuntes Tutorium -- Übungsblatt 9]{Das Ende Naht aht ht t\\\small Ohren hab ich gesagt 9}
\date{\sffamily KW 3}

\tikzset{
    dot/.style={circle,draw,align=center,text width=1em,execute at begin node={\strut}}
}

\usepackage[glows]{tikzpingus}
\usetikzlibrary{decorations.text,matrix}
\hypersetup{colorlinks=false}

\begin{document}
\Titlepage{9}
\fi

\section{Präsenzaufgabe}
\subsection{Freude mit Sortierverfahren}
\begin{frame}{Präsenzaufgabe}
    \begin{aufgabe}{Wenn du dein Kinderzimmer nicht aufräumst, \ldots}
        \pause{}\small Sie sollen die \textit{Binäre Suche} implementieren, welche nützlich ist um ein sortiertes Array effizient zu durchsuchen. Schreiben Sie die Methode \bjava{int find(int[] array, int element)} als Wrapper für die Suche.\pause{} Diese Methode soll ein (aufsteigend) sortiertes Array und das gesuchte Element als Parameter übernehmen, und daraufhin den Index des Elements im Array zurückgeben, sofern dieses vorhanden ist. Sollte das Elemente mehrfach vorhanden sein, soll der kleinste Index zurückgegeben werden. Falls das Element nicht im Array vorhanden ist, soll \bjava{-1} zurückgegeben werden.
        Implementieren Sie die Binäre Suche \textit{rekursiv}. (Rekursive) Hilfsmethoden sind gestattet.\pause{}
        Die Suche nach der \bjava{68}:\vspace*{-1.15\baselineskip}
\begin{center}
    \begin{tikzpicture}
        \foreach[count=\i] \a in {4, 13, 21, 29, 33, 34, 56, 68, 71, 74, 78} {
            \node (\a) at (\i, 0) {\expandafter\bjava\expandafter{\a}};
        }
        \onslide<5->{\draw[Kite-] (34) -- ++(0,.55);}
        \onslide<6->{\draw[-Kite] (34.south) to[bend right=25] (71.south);}
        \onslide<7->{\draw[-Kite] (71.north) to[bend right=25] (56.north);}
        \onslide<8->{\draw[-Kite] (56.south) to[bend right=15] (68.south);}
    \end{tikzpicture}\vspace*{-.25\baselineskip}
\end{center}
        \onslide<1->
    \end{aufgabe}
\end{frame}
\begin{frame}[c]{Präsenzaufgabe - Lösung}
\begin{itemize}[<+(1)->]
    \itemsep9.5pt
    \item Wir erschaffen eine Suche: \only<2->{\textattachfile{\curpath BinarySearch.java}{BinarySearch.java}}.
    \item Die Idee: \begin{itemize}
        \item Wir markieren das zu durchsuchende Fenster mit \bjava{left} und \bjava{right}.
        \item Ist das Fenster leer, haben wir das Element nicht gefunden.
        \item Sonst prüfen wir: Ist das mittlere Element das Gesuchte?
        \item Ist es kleiner, suchen wir links, ist es größer, rechts weiter.
    \end{itemize}
    \item Dafür nutzen wir die Hilfsmethode: \bjava{binarySearch(int[] array, int left, int right, int element)}.
    \item Wir beginnen mit der Suche im gesamten Array: \bjava{binarySearch(array, 0, array.length - 1, element);}
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Präsenzaufgabe - Lösung}
\SetupLstHl\lstfs{10}
\begin{plainjava}
!*\onslide<2->*!|ihl|int binarySearch(int[] array, int left, int right, int element) {|ihl|
!*\onslide<3->*!    // !*\textbf{\solGet{comments}{1)}}*! Fenster ist leer
!*\onslide<4->*!    if (right < left)
!*\onslide<4->*!        return -1;
!*\onslide<2->*!
!*\onslide<5->*!    int middle = left + (right - left) / 2;
!*\onslide<3->*!    // !*\textbf{\solGet{comments}{2)}}*! Ist das Mittlere das Gesuchte?
!*\onslide<6->*!    if (array[middle] == element)
!*\onslide<6->*!        return middle;
!*\onslide<3->*!    // !*\textbf{\solGet{comments}{3)}}*! Kleiner: suche links weiter
!*\onslide<7->*!    else if (array[middle] > element)
!*\onslide<7->*!        return binarySearch(array, left, middle - 1, element);
!*\onslide<3->*!    // !*\textbf{\solGet{comments}{4)}}*! Größer: suche rechts weiter
!*\onslide<8->*!    else
!*\onslide<8->*!        return binarySearch(array, middle + 1, right, element);
!*\onslide<2->*!|ihl|}|ihl|
\end{plainjava}
\end{frame}

\begin{frame}[fragile]{Präsenzaufgabe - Lösung}
\begin{itemize}[<+(1)->]
    \itemsep6.5pt
    \item Einen Teil haben wir noch nicht gemacht:\pause \begin{center}
        \parbox{.715\linewidth}{\textcolor{gray}{Sollte das Elemente mehrfach vorhanden sein, soll der kleinste Index zurückgegeben werden}}
    \end{center}
    \item Idee: Wir verringern den Index, solange das Element immer noch das Gesuchte ist:
\SetupLstHl\lstfs{10}\begin{plainjava}
public static int find(int[] array, int element) {
    int index = binarySearch(array, 0, array.length - 1, element);
    if (index == -1) return -1;

    for (int i = 1; i <= index; i++) {
        if (array[index - i] != element)
            return index - i + 1;
    }
    return 0;
}
\end{plainjava}
\end{itemize}
\end{frame}

\section{Übungsblatt 9}
\subsection{Aufgabe 1}
\begin{frame}[t,fragile]{Übungsblatt 9 - Aufgabe 1}
    \begin{itemize}[<+(1)->]
        \item Die Datei befindet sich hier: \only<2->{\textattachfile{\curpath CompoundInterest.java}{CompoundInterest.java}}
    \end{itemize}\vfill
\SetupLstHl\lstfs{10}%
\begin{plainjava}
!*\onslide<3->*!|ihl|public static|ihl|
!*\onslide<3->*!double compoundInterest(double capital, double interestRate, int years) {
!*\onslide<4->*!    if(years == 0)
!*\onslide<5->*!        return capital;
!*\onslide<4->*!    else
!*\onslide<6->*!        return compoundInterest(capital * (1 + interestRate), interestRate,
!*\onslide<6->*!            years - 1);
!*\onslide<3->*!}
\end{plainjava}
\vfill\null
\end{frame}

\subsection{Aufgabe 2}
\begin{frame}[fragile]{Übungsblatt 9 - Aufgabe 2}
    \begin{itemize}[<+(1)->]
        \item Die Datei befindet sich hier: \only<2->{\textattachfile{\curpath Palindrome.java}{Palindrome.java}}
    \end{itemize}\vfill
\SetupLstHl\lstfs{10}%
\begin{plainjava}
!*\onslide<3->*!private static boolean isPalindrome(String s) {
!*\onslide<4->*!    return isPalindromeRecursive(s.toLowerCase());
!*\onslide<3->*!}


!*\onslide<5->*!private static boolean isPalindromeRecursive(String s) {
!*\onslide<6->*!    if(s.length() < 2)
!*\onslide<6->*!        return true;
!*\onslide<7->*!    else if(s.charAt(0) != s.charAt(s.length() - 1))
!*\onslide<7->*!        return false;
!*\onslide<8->*!    else
!*\onslide<8->*!        return isPalindromeRecursive(s.substring(1, s.length() - 1));
!*\onslide<5->*!}
\end{plainjava}
\vfill\null
\end{frame}


\subsection{Aufgabe 3}
\begin{frame}[fragile]{Übungsblatt 9 - Aufgabe 3}
    \begin{itemize}[<+(1)->]
        \item Die Datei befindet sich hier: \only<2->{\textattachfile{\curpath Combinations.java}{Combinations.java}}
    \end{itemize}\vfill
\SetupLstHl\lstfs{10}%
\begin{plainjava}
TODO
\end{plainjava}
\vfill\null
\end{frame}

\section{Die End-End-End-End-End-End-Pinguuuuuu}

\begin{frame}[c]
    \begin{center}
        \scalebox{0.1}{%
        \begin{tikzpicture}
            \onslide<+(1)->{
            \begin{scope}[scale=1.125,xshift=0cm]
                \pingu[sign post left={\large 2},left wing hug,heart=cprimary!0!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=1.25,xshift=1cm]
                \pingu[sign post left={\large 1},left wing hug,heart=cprimary!6!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=1.5,xshift=1.45cm]
                \pingu[sign post left={\large 3},left wing hug,heart=cprimary!12!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=2,xshift=1.25cm]
                \pingu[sign post left={\Large 4},left wing hug,heart=cprimary!18!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=2.5,xshift=1.125cm]
                \pingu[sign post left={\LARGE 7},left wing hug,heart=cprimary!24!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=3.125,xshift=1.25cm]
                \pingu[sign post left={\huge 11},left wing hug,heart=cprimary!30!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=3.75,xshift=1.5cm]
                \pingu[sign post left={\Huge 18},left wing hug,heart=cprimary!36!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=4.65,xshift=1.5cm]
                \pingu[sign post left={\scalebox{3.5}{29}},left wing hug,
                heart=cprimary!42!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=5.65,xshift=1.5cm]
                \pingu[sign post left={\scalebox{4.5}{47}},left wing hug,
                heart=cprimary!48!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=7,xshift=1.5cm]
                \pingu[sign post left={\scalebox{5.5}{76}},left wing hug,
                heart=cprimary!54!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=8.5,xshift=1.5cm]
                \pingu[sign post left={\scalebox{7}{123}},left wing hug,
                heart=cprimary!60!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=10.125,xshift=1.5cm]
                \pingu[sign post left={\scalebox{8}{199}},left wing hug,
                heart=cprimary!66!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=12.125,xshift=1.5cm]
                \pingu[sign post left={\scalebox{9}{322}},left wing hug,
                heart=cprimary!72!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=14.5,xshift=1.5cm]
                \pingu[sign post left={\scalebox{10}{521}},left wing hug,
                heart=cprimary!78!csecondary]
            \end{scope}}
            \onslide<+(1)->{
            \begin{scope}[scale=17.5,xshift=1.35cm]
                \pingu[sign post left={\scalebox{12.45}{843}},left wing hug,
                heart=cprimary!84!csecondary]
            \end{scope}}
        \end{tikzpicture}
        }
    \end{center}
\end{frame}
\iffull\end{document}\fi
