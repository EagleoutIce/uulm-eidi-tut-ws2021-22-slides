\InputIfFileExists{../global.src}\relax\relax

\iffull
\title[Siebtes Tutorium -- Übungsblatt 7]{Vom Überladen und Gesehen werden!\\\small Übergabepunkt 7}
\date{\sffamily KW 50}

\usepackage[glows]{tikzpingus}
\usetikzlibrary{decorations.text,matrix}
\hypersetup{colorlinks=false}

\begin{document}
\Titlepage{7}
\fi

% region Präsenzaufgabe
\section{Präsenzaufgabe}
\begin{frame}[fragile,c]{Präsenzaufgabe}
    \pause\begin{aufgabe}{Die Springer meiner Herzen sie umkreisen mich\ldots}
        \hfill\smash{\raisebox{1.1\baselineskip}{\llap{\tiny\color{white}\textit{Und mit jeder weitren Zeile, leide ich.~~~~~~~}}}}\vspace*{-\parskip-.75\baselineskip}\par\onslide<3->{Erstellen Sie eine \bjava{Circle}-Klasse mit privaten Instanzvariablen für Radius, Flächeninhalt und Umfang.} \onslide<4->{Definieren Sie einen öffentlichen Konstruktor der auf Basis eines Radius die Instanzvariablen initialisiert.} \onslide<5->{Erstellen Sie nun zusätzlich die Methoden:}
\begin{itemize}
    \item<6->\small \textit{Getter}-Methoden für die Instanzvariablen.
    \item<7->\small Eine Methode um die Kreiseigenschaften auf der Kommandozeile auszugeben.
    \item<8->\small Eine statische Methode, die für einen Kreisradius den Flächeninhalt zurückgibt.
    \item<9->\small Eine statische Methode, die für einen Kreisradius den Umfang zurückgibt.
\end{itemize}
\onslide<10->{\textit{Bonus:} Wäre es möglich zusätzliche Konstruktoren zu definieren, welche entweder nur den Flächeninhalt oder nur den Umfang als Parameter übernehmen?}
        \onslide<1->
    \end{aufgabe}
\end{frame}

\MakeThePinguExplainIt[text width=7cm]{cap=!hide,vr-headset,vr-headset hair}{Anstelle von \bjava{radius * radius} geht auch \bjava{Math.pow(radius,2)} für \(\mathrm{radius}^2\).~~~Die Formeln sollten natürlich bekannt sein \Laughey.}
\newcommand<>{\mark}[1]{{\only#2{\color{black}}#1}}
\begin{frame}[t,fragile]{Präsenzaufgabe - Lösung}
    \begin{itemize}[<+(1)->]
        \item<2-> Das wichtigste Beiseite: \only<2->{\textattachfile{\curpath Circle.java}{Circle.java}}
        \item<3-> Wir gehen in die Analyse:\bigskip\par
\begin{columns}[c]
\column{.4\linewidth}
\small\onslide<4->{\only<5->{\color{gray}}Erstellen Sie eine \mark<6->{\only<4|handout:0>{\!\bjava{Circle}}\only<5->{\T{Circle}}-Klasse} mit \mark<10->{privaten} \mark<8->{Instanzvariablen für Radius, Flächeninhalt und Umfang}.}\medskip

\onslide<11->{\only<11>{\color{black}}\only<12->{\color{gray}}Definieren Sie einen \mark<13->{öffentlichen Konstruktor} der auf Basis eines \mark<15->{Radius} die \mark<17->{Instanzvariablen initialisiert}.}
\column{.6\linewidth}\lstfs{9}
\begin{plainjava}
!*\onslide<7->*!public class Circle {
!*\onslide<10->*!   private !*\onslide<9->*!double radius;
!*\onslide<10->*!   private !*\onslide<9->*!double area;
!*\onslide<10->*!   private !*\onslide<9->*!double circumference;
!*\onslide<10->*!
!*\onslide<14->*!   public Circle(!*\onslide<16->*!double radius!*\onslide<14->*!) {
!*\onslide<18->*!       this.radius = radius;
!*\onslide<19->*!       this.area = Math.PI * radius * radius;
!*\onslide<19->*!       this.circumference = 2 * Math.PI * radius;
!*\onslide<14->*!   }
!*\onslide<7->*!}
\end{plainjava}
\end{columns}
    \end{itemize}
\begin{tikzpicture}[overlay, remember picture]
    \onslide<20->{\node[left=-7mm,scale=.8] at(current page.5) {\usebox\pinguexplainbox};}
\end{tikzpicture}
\end{frame}

\begin{frame}[t,fragile]{Präsenzaufgabe - Lösung\hfill Getter}
    \begin{itemize}[<+(1)->]
        \item Nun gilt es zu sondieren\ldots\pause
\lstfs{10}\SetupLstHl
\begin{plainjava}
|ihl|public class Circle {|ihl|
    |ihl|private double radius;|ihl|
    |ihl|private double area;|ihl|
    |ihl|private double circumference;|ihl|
    |ihl|:ldots:|ihl|
    |ihl|public Circle(double radius) { :ldots: }|ihl|

    !*\onslide<4->*!public double getRadius() { return radius; }
    !*\onslide<5->*!public double getArea() { return area; }
    !*\onslide<6->*!public double getCircumference() { return circumference; }
!*\onslide<3->*!|ihl|}|ihl|
\end{plainjava}
    \end{itemize}
\end{frame}

\begin{frame}[t,fragile]{Präsenzaufgabe - Lösung\hfill Dump}
    \begin{itemize}[<+(1)->]
        \item Ein printchen Liebe, ein printchen Freude\ldots\pause
\lstfs{10}\SetupLstHl
\begin{plainjava}
|ihl|public class Circle {|ihl|
    |ihl|private double radius;|ihl|
    |ihl|private double area;|ihl|
    |ihl|private double circumference;|ihl|

    |ihl|public Circle(double radius) { :ldots: }|ihl|
    |ihl|:ldots:|ihl|

    !*\onslide<4->*!public void printProperties() {
    !*\onslide<5->*!    System.out.println("Radius: " + this.radius + "cm");
    !*\onslide<6->*!    System.out.println("Fläche: " + this.area + "cm^2");
    !*\onslide<7->*!    System.out.println("Umfang: " + this.circumference + "cm");
    !*\onslide<4->*!}
!*\onslide<3->*!|ihl|}|ihl|
\end{plainjava}
    \end{itemize}
\end{frame}

\begin{frame}[t,fragile]{Präsenzaufgabe - Lösung\hfill Statische Methoden}
    \begin{itemize}[<+(1)->]
        \item Berechne Gefechte:\ldots\pause
\lstfs{10}\SetupLstHl
\begin{plainjava}
|ihl|public class Circle {|ihl|
    |ihl|private double radius;|ihl|
    |ihl|private double area;|ihl|
    |ihl|private double circumference;|ihl|

    |ihl|public Circle(double radius) { :ldots: }|ihl|
    |ihl|:ldots:|ihl|

    !*\onslide<4->*!public static double computeArea(double radius) {
    !*\onslide<5->*!    return Math.PI * radius * radius;
    !*\onslide<4->*!}
    !*\onslide<6->*!public static double computeCircumference(double radius) {
    !*\onslide<7->*!    return 2 * Math.PI * radius;
    !*\onslide<6->*!}
!*\onslide<3->*!|ihl|}|ihl|
\end{plainjava}
    \end{itemize}
\end{frame}

\begin{frame}[t,fragile]{Präsenzaufgabe - Lösung\hfill Refactoring}
    \begin{itemize}[<+(1)->]
        \item Die statischen Methoden können wir rückwirkend verwenden\ldots\pause
\lstfs{10}\SetupLstHl
\begin{plainjava}
|ihl|public class Circle {|ihl|
    |ihl|private double radius;|ihl|
    |ihl|private double area;|ihl|
    |ihl|private double circumference;|ihl|

!*\onslide<4->*!    public Circle(double radius) {
!*\onslide<4->*!        this.radius = radius;
!*\onslide<5->*!        this.area = Circle.computeArea(radius);
!*\onslide<6->*!        this.circumference = Circle.computeCircumference(radius);
!*\onslide<4->*!    }
!*\onslide<3->*!    |ihl|:ldots:|ihl|

    |ihl|public static double computeArea(double radius) { :ldots: }|ihl|
    |ihl|public static double computeCircumference(double radius) { :ldots: }|ihl|
|ihl|}|ihl|
\end{plainjava}
    \end{itemize}
\end{frame}


\begin{frame}[t,fragile]{Präsenzaufgabe - Lösung\hfill Bonus}
    \begin{itemize}[<+(1)->]
        \item Da wir nur einen Parameter übergeben, hilft uns Overload\texttrademark\ leider nicht!\pause
\SetupLstHl%
\begin{plainjava}
|ihl|public class Circle {|ihl|
    |ihl|:ldots:|ihl|
    |ihl|public Circle(double radius) { :ldots: }|ihl|

!*\onslide<4->*!    public Circle(double area) { :ldots: }
!*\onslide<4->*!    public Circle(double circumference) { :ldots: }
!*\onslide<3->*!    |ihl|:ldots:|ihl|
|ihl|}|ihl|
\end{plainjava}
    \onslide<5->{Alle drei Konstruktoren würden durch \bjava{Circle(double)} identifiziert werden. Das erlaubt Java allerdings \textbf{nicht}.}
    \end{itemize}
\end{frame}


% \begin{frame}[t,fragile]{Präsenzaufgabe - Lösung, Exkurs}
%     \begin{itemize}[<+(1)->]
%         \item Hier eine \bjava{compareTo}-Implementation für Zeichenketten:
% \begin{plainjava}
% !*\onslide<3->*!static int compareStrings(String a, String b) {
% !*\onslide<4->*!    for(int i = 0; i < Math.min(a.length(), b.length()); i++) {
% !*\onslide<5->*!        if(a.charAt(i) != b.charAt(i))
% !*\onslide<5->*!            return a.charAt(i) - b.charAt(i);
% !*\onslide<4->*!    }
% !*\onslide<6->*!    return a.length() - b.length();  // Kürzere sind kleiner!
% !*\onslide<3->*!}
% \end{plainjava}
%     \item<7-> Diese hat ein Problem mit \bjava{null}. Wie liese sich dies lösen? \onslide<8->{\info{Dies verbleibt als Aufgabe \Laughey.}}
%     \item<9-> Ist dies die offizielle \bjava{String::compareTo}-Implementation? \onslide<10->{\info{Das hängt von der Implementation und der Java Version ab. Im Allgemeinen: fast. Die zugrundeliegende Implementation ist besser für diverse Encodings.}}
%     \end{itemize}
% \end{frame}

% \begin{frame}[t,fragile]{Präsenzaufgabe - Lösung, Exkurs}
%     \begin{itemize}[<+(1)->]
%         \item Und hier analog für Date:
% \begin{plainjava}
% !*\onslide<3->*!static int compareDates(Date a, Date b) {
% !*\onslide<4->*!    long aTime = a.getTime();
% !*\onslide<4->*!    long bTime = b.getTime();
% !*\onslide<5->*!    if(aTime == bTime) return 0;
% !*\onslide<6->*!    return aTime > bTime ? 1 : -1;
% !*\onslide<3->*!}
% \end{plainjava}
%     \item<7-> Warum geben wir hier nicht einfach die Differenz zurück? \onslide<8->{\info{Die Differenz zweier longs ist immernoch \bjava{long}. Zudem hätten wir im allgemeinen ein Überlaufproblem. Da man deswegen ohnehin nicht auf die Differenz vertrauen kann, ist es so sicherer.}}
%     \item<9-> Würde dieses Problem nicht auch bei \bjava{compareStrings} auftreten? \onslide<10->{\info{Nein, die Differenz zweier chars liefert einen Integer und entgeht damit dieser Problematik (zumindest in Java).}}
%     \end{itemize}
% \end{frame}

% endregion

\section{Übungsblatt 7}
% #region Aufgabe 1
\subsection{Aufgabe 1}
\begin{frame}[t,fragile]{Übungsblatt 7 - Aufgabe 1}
    \begin{itemize}[<+(1)->]
        \item
    \end{itemize}
\end{frame}
% #endregion

% #region Aufgabe 2
\subsection{Aufgabe 2}
\begin{frame}[t,fragile]{Übungsblatt 7 - Aufgabe 2a)}
    \begin{itemize}[<+(1)->]
        \item
    \end{itemize}
\end{frame}
% #endregion

% #region End Pingu
\definecolor{coffe}{RGB}{112,43,9}%
\definecolor{smokegray}{RGB}{222,219,219}%
\newsavebox{\smoke}\savebox{\smoke}{%
\begin{tikzpicture}
    \fill[smokegray,fill opacity=0.87] (0,0) .. controls (1.5,1.5)  and (-0.8,2) .. (0.35,3.5) .. controls (-1.45,2)  and (0.8,1.5) .. cycle;
    \begin{scope}[xshift=3.25em,yshift=-0.25em]
    \fill[smokegray,fill opacity=0.87] (-0.25,1.75) .. controls (-1,2.8)  and (0.64,3.3) .. (-0.65,4) .. controls (0.25,3.25) and (-1.75,3.3) .. cycle;
    \end{scope}
\begin{scope}[xshift=-2.5em,yshift=-3em]
    \fill[smokegray,fill opacity=0.87] (-0.25,1.75) .. controls (-1,2.8)  and (0.64,3.3) .. (-0.65,4) .. controls (0.25,3.25) and (-1.75,3.3) .. cycle;
    \end{scope}
\end{tikzpicture}}
\newsavebox{\calc}
\savebox{\calc}{%
\begin{tikzpicture}[e/.style={rectangle,rounded corners=1.8pt,fill=lightgray!85!white,minimum width=1.25em,minimum height=1.25em,font=\footnotesize}]
    \draw[rounded corners=4pt,fill=white] (0-0.15,-0.05) rectangle ++(2.6,3.5);
    % cp xd
    \node[e] at(0.25,0.33) {.}; \node[e] at(0.25+0.6,0.33) {0};
    \node[e,fill=shadeA] at(0.25+2*0.6,0.33) {=};
    \node[e] at(0.25+3*0.6,0.33) {+};
    \node[e] at(0.25,0.33+0.6) {1}; \node[e] at(0.25+0.6,0.33+0.6) {2};
    \node[e] at(0.25+2*0.6,0.33+0.6) {3};
    \node[e] at(0.25+3*0.6,0.33+0.6) {\raisebox{-1pt}{--}};
    \node[e] at(0.25,0.33+2*0.6) {4}; \node[e] at(0.25+0.6,0.33+2*0.6) {5};
    \node[e] at(0.25+2*0.6,0.33+2*0.6) {6};
    \node[e] at(0.25+3*0.6,0.33+2*0.6) {$\times$};
    \node[e] at(0.25,0.33+3*0.6) {7}; \node[e] at(0.25+0.6,0.33+3*0.6) {8};
    \node[e] at(0.25+2*0.6,0.33+3*0.6) {9};
    \node[e] at(0.25+3*0.6,0.33+3*0.6) {$\div$};
    \node[e,fill=lightgray!20!white,minimum width=6em,minimum height=2em,above=1em] (field) at(0.25+1.5*0.6,0.33+3*0.6) {};
    \node[below right,scale=0.7] at(field.north west) {{getKey(A,\,B);}};
    \node[above left,scale=0.8] at(field.south east) {\textsf{5}};
\end{tikzpicture}}
\newsavebox{\alice}\savebox{\alice}{%
    \begin{tikzpicture}
        % \pingu[santa,heart=!hide,name=alice,after code={},left wing grab,cup,cup straw=!hide,cup drops=!hide,cup=paletteA,cup cover=coffe,in code={\fill[top color=coffe,bottom color=coffe!60!black] \pingupathExtraCupCover;\draw[paletteA] \pingupathExtraCupCoverOut;},after code={\node[scale=0.115,xshift=-10pt,yscale=0.9] at(alice-bill) {\usebox{\smoke}};}]
    \end{tikzpicture}
}%
\newsavebox{\bob}\savebox{\bob}{%
    \begin{tikzpicture}
        % \pingu[santa=pingu@santa@red!94!black,name=bob,after code={},left eye wink,sign post={\raisebox{10pt}{\scalebox{0.65}{\parbox{1.2cm}{\centering\small I \textcolor{pingu@red!90!black}{\faHeart}\\[-0.1cm]\color{white}\LaTeX\\[-0.65cm]}}}}]
    \end{tikzpicture}
}%
\newsavebox{\eve}\savebox{\eve}{%
    \begin{tikzpicture}
        % \pingu[santa=pingu@black!80!purple,heart=!hide,name=eve,left wing hug,after code={\node[pingu@black!80!purple] at (eve-heart) {\faWindows}; \begin{pgfinterruptboundingbox}\node[scale=0.25,rotate=13,yshift=1.4em,xshift=0.1em] at (eve-left-wing-tip) {\usebox{\calc}};\end{pgfinterruptboundingbox}},sunglasses*]
    \end{tikzpicture}
}%
\section{Der End-Pinguuuu}
\begin{frame}[c]
   \pause\begin{center}
    \scalebox{1.25}{\begin{tikzpicture}
        \node at(0,0)      (alice) {\usebox{\alice}};
        \node at(7,0)      (bob)   {\usebox{\bob}};
        \node at(3.5,-2.5) (eve)   {\usebox{\eve}};
        \draw[-Kite,transform canvas={yshift=0.33em}] (alice.east) node[above right] {\(A = 14\)} -- (bob.west);
        \draw[Kite-,transform canvas={yshift=-0.33em}] (alice.east) -- (bob.west)  node[below left] {\(B = 12\)};
        \draw[densely dashed] (eve.north) -- ++(0,2);
        \node[below,xshift=-0.4em] at (alice.south) {Alice};
        \node[below,xshift=-0.7em] at (bob.south) {Bob};
        \node[below] at (eve.south) {Eve};
    \end{tikzpicture}}
   \end{center}
\end{frame}
% #endregion
\iffull\end{document}\fi